#include <stdio.h>
#include <stdlib.h>

#define MAX 100  // Maximum number of vertices

int adj[MAX][MAX];  // Adjacency matrix
int visited[MAX];   // Visited array
int stack[MAX];     // Stack for DFS
int top = -1;       // Stack top
int n;             // Number of vertices

// Push to stack
void push(int v) {
    stack[++top] = v;
}

// Pop from stack
int pop() {
    return stack[top--];
}

// DFS using stack (iterative)
void dfs_iterative(int start) {
    push(start);
    
    while (top != -1) {
        int vertex = pop();

        // If already visited, skip
        if (visited[vertex]) continue;

        // Mark as visited and print
        visited[vertex] = 1;
        printf("%d ", vertex);

        // Push all adjacent unvisited vertices to stack (reverse order for proper DFS order)
        for (int i = n - 1; i >= 0; i--) {
            if (adj[vertex][i] == 1 && !visited[i]) {
                push(i);
            }
        }
    }
}

int main() {
    int edges, u, v, start;

    printf("Enter number of vertices: ");
    scanf("%d", &n);
    
    printf("Enter number of edges: ");
    scanf("%d", &edges);

    // Initialize adjacency matrix and visited array
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            adj[i][j] = 0;
        }
        visited[i] = 0;
    }

    printf("Enter edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;
        adj[v][u] = 1;  // Remove for directed graphs
    }

    printf("Enter starting vertex: ");
    scanf("%d", &start);

    printf("DFS Traversal: ");
    dfs_iterative(start);
    printf("\n");

    return 0;
}
